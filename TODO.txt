DONE: handle if no cards are found on second search
DONE: get card languages for found cards
DONE: remove initial loading state (use React Query?)
DONE: update foil / non-foil to include etched foil and glossy and new setup of scryfall api. Use finishes field
DONE: handle opening card details page in new window
DONE: clean up this file
DONE: fix transparency issue in tooltip
DONE: move cardSearch to separate component
DONE: add autocomplete / suggestions to card search (using headlessUI combobox?)
DONE: add counting of total versions in search results
DONE: implement datamodel
DONE: add card to datamodel
DONE: fix cardNameSearch bugs (clear input field, hide options when not active)

IN PROGRESS: add collection state
IN PROGRESS: remove card from collection

TODO: handle different conditions when listing collected copies on card page
TODO: move finishes, conditions and languages to enum
TODO: handle multiple pages in search results
TODO: handle going back from card details to search results
TODO: handle empty search query
TODO: move api calls and procces function to seperate file
TODO: add language support to opening cards in new tab
TOOD: move toggle to seperate component (consider using headlessUI toggle component)




Data model collection:

"collection": {
  "user": ""
  "cards": [
    {
      "id": "abcd",
      "name": "",
      "set": "",
      "nr": "",
      "language": "",
      "collected": [
        {
          "finish": "",
          "quantity": "",
          "condition": "",
        }
      ]
    },
  ]
}




Notes on Redux: 

// Define an initial state value for the app
const initialState = {
  value: 0
}

// Create a reducer function that determins what the new state should be when something happens in the app
function counterReducer(state = initialState, action) {
  switch (action.type) {
    case 'counter/incremented':
      return { ...state, value: state.value + 1 }
    case 'counter/decremented':
      return { ...state, value: state.value - 1 }
    default:
      return state
  }
}

// Create a new Redux store with the 'createStore' function, and use the 'counterReducer' for the update logic
const store = Redux.createStore(counterReducer)

// Using the store in the UI
function render() {
  const state  store.getState()
  // do something with the state
}
render()
store.subscribe(render)

// Dispatch actions
store.dispatch({ type: 'counter/incremented' })



Add the @reduxjs/toolkit and react-redux packages
Create a Redux store using RTK's configureStore API, and pass in at least one reducer function
Import the Redux store into your application's entry point file (such as src/index.js)
Wrap your root React component with the <Provider> component from React-Redux, like:

ReactDOM.render(
  <Provider store={store}>
    <App />
  </Provider>,
  document.getElementById('root')
)

