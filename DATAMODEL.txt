Data model collection:

collection: {
  user: "name"
  cards: [
    {
      id: "bd43d44b-de27-4139-9cb8-b1f4c04fb87e",
      name: "Blightbeetle",
      set: "M20",
      nr: "87",
      language: "EN",
      collected: [
        {
          finish: "nonfoil",
          quantity: "1",
          condition: "NM",
        },
      ]
    },
  ]
}

Functions:

// Returns all cards in getCollection
// Returns null if no cards in collection
export const getCollection = () => JSON.parse(localStorage.getItem("collection")).cards

// Update collection or create one of none exist already
export const updateCollection = (collection) => localStorage.setItem("collection", JSON.stringify(collection))

// Returns an Card object for the provided id
// Returns null if card is not found in collection
export const getCard = (id) => {
    collection = getCollection()
    if (collection === null) return null
    return collection.cards.filter(card => card.id === id)
}

// Returns an Card object for the provided set, nr, language combination
// Returns null if card is not found in collection
export const getCard = (set, nr, language) => {
    collection = getCollection()
    if (collection === null) return null
    return collection.cards.filter(card => {
        card.set === set &&
        card.nr === nr &&
        card.language === language
    })
}

// Adds card to collection
// Card objects requires an id, name, set, nr, language and a collected array
export const addCard = (card) => {}


// Replaces existing card data with new card data
export const updateCard = (card) => {}


// Removes all versions of provided card from collection
export const removeCard = (id) => {}


// Removes specific version of a card from collection
export const removeCardVersion = (id, finish, condition) => {}


// Returns the total number of collected cards
// Returns 0 if no cards in collection
export const getCollectionCount = () => {
    const cards = getCollection()
    if (cards === null) return 0
    count = 0
    cards.forEach(card => {
        card.collected.forEach(collectedCard => {
            count += collectedCard.quantity
        })
    })
    return count
}

// Returns an int with the sum of all collected copies of this card
// Returns 0 if card is not in collection
export const getCardCount = (id) => {
    const cards = getCard(id)
    if (card === null) return 0
    count = 0
    cards.collected.forEach(card => {
        count += card.quantity
    })
    return count
}

// Returns an int with the sum of all collected copies of this card with a particular finish
// Returns 0 if card is not in collection
export const getCardCountFinish = (id, finish) => {
    const cards = getCard(id)
    if (card === null) return 0
    count = 0
    cards.collected.filter(card => {
        card.finish === finish
    }).forEach(card => {
        count += card.quantity
    })
    return count
}

// Returns the raw scryfall data for the provided card id
export const getScryfallCard = (id) => {
    return fetch(`https://api.scryfall.com/cards/${id}`)
      .then((res) => res.json())
}

// Returns a list of id's of other languages of provided card
export const getOtherLanguages = (id) => {
    const cardList = []
    const scryfallCardData = getScryfallCard(id)
    const scryfallUrl = `https://api.scryfall.com/cards/search?q=set%3A${scryfallCardData.set}+cn%3A${scryfallCardData.collector_number}&unique=prints&include_multilingual=true`
    fetch(scryfallUrl)
    .then((res) => res.json())
    .then((json) => {
        json.data.forEach(card => {
            cardList.push({
                language: card.lang,
                id: card.id
            })
        })
    })
    return cardList
}

// List of all collected finishes / languages / conditions of provided card
export const getCollectedList = (id) => {
    const collected = []
    const otherLanguages = getOtherLanguages(id)
    otherLanguages.forEach(card => {
        const cardObject = getCard(card.id)
        // Check if card is in collection
        if (cardObject) { 
            cardObject.collected.forEach(collectedCard => {
                collected.push({
                    finish: collectedCard.finish,
                    quantity: collectedCard.quantity,
                    condition: collectedCard.condition,
                    language: cardObject.language
                })
            })
        }
    })
    return collected
}




Data model card data:
// Is dit uberhaubt nodig of kunnen we af met de raw_data?
card: {
    name: "",
    id: "",
    set: "",
    set_name: "",
    collector_number: "",
    rarity: "",
    prices: {
        eur: "",
        eur_foil: "",
        usd: "",
        usd_foil: "",
        usd_etched: "",
    }
    img: "",
    external_links: {
        scryfall: "",
        cardmarket: "",
        tcgplayer: "",
        gatherer: "",
    }

    // other_languages onderbrengen in losse functie?
    other_languages: {
        [language]: "id",
    }
}